@{
    ViewBag.Title = "Orders";

    // UpdateTargetId - элемент на странице, который будет обновляется после получения новых данных со стороны сервера.
    // Url - адрес ресурса на сервере, который возвращает данные для обновления страницы
    var options = new AjaxOptions()
    {
        UpdateTargetId = "tabledata",
        Url = Url.Action("OrdersData")
    };
}

<h2>Orders</h2>

@*
    Ajax.BeginForm(options) - при использовании данного метода, генерируется html элемент со специальными атрибутами.
    Данные атрибуты будут использоваться библиотекой jquery.unobtrusive-ajax для того, чтобы определить форму, которая вместо
    обычного postback запроса должна делать асинхронный запрос.
*@
@using (Ajax.BeginForm(options))
{
    <table cellpadding="4">
        <thead>
            <tr>
                <th>Id</th>
                <th>Product</th>
                <th>Quantity</th>
                <th>Customer</th>
            </tr>
        </thead>

        <tbody id="tabledata">
            @Html.Action("OrdersData", new { max = ViewBag.Max, min = ViewBag.Min, customer = "All", product = "All" })
        </tbody>

    </table>

    if (ViewBag.Min != null && ViewBag.Max != null)
    {
        @Html.Label("Min")
        @Html.TextBox("min", (object)ViewBag.Min, new { type = "number", max = ViewBag.Max, min = ViewBag.Min, onchange = "validate()" })
        @Html.Label("Max")
        @Html.TextBox("max", (object)ViewBag.Max, new { type = "number", max = ViewBag.Max, min = ViewBag.Min, onchange = "validate()" })
    }
    <p>
        @*При отправке обратного запроса на сервер, в форме будет содержаться поле id которое методом действия будет использоваться для фильтрации данных*@
        @if (ViewBag.Customer != null)
        {
            @Html.DropDownList("customer", new SelectList(ViewBag.Customer, (Model ?? "All")))
        }
        @if (ViewBag.Product != null)
        {
            @Html.DropDownList("product", new SelectList(ViewBag.Product, (Model ?? "All")))
        }

        <div>
            @foreach (var customer in (IEnumerable<string>)ViewBag.Customer)
            {
                @Ajax.ActionLink(customer, "OrdersData", new { max = ViewBag.Max, min = ViewBag.Min, customer = customer, product = "All" },
           new AjaxOptions
           {
               UpdateTargetId = "tabledata"
           })
                @:&nbsp;
            }
        </div>

        <input type="submit" value="Submit" />
    </p>
}

@section scripts
{
    @*Ненавязивый JavaScript для выполнения запроса на сервер без полного обновления страницы*@
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script>
        function validate() {
            var minValue = document.getElementById("min");
            var maxValue = document.getElementById("max");
            console.log(minValue.value);
            console.log(maxValue.value);
            if (minValue.value > maxValue.value) {
                minValue.value = maxValue.value;
            }

            if (maxValue.value > 12) {
                maxValue.value = 12;
            }

            if (minValue.value < 0) {
                minValue.value = 0;
            }
        }
    </script>
}

